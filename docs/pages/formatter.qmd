{{< include /pages/_links.qmd >}}
---
title: "`xso::generator` --- Custom Formatting"
---

We specialize the [`std::formatter`] class to connect any [`xso::generator`], [`State`], or [`Scrambler`] class to [`std::format`] and friends.

All of our classes have a class method `xso_name()` that returns a suitable name string.

We define a {{< var cpp >}} [concept][`<concepts>`] to capture that common feature:
```cpp
template<typename T>
concept has_xso_name_class_method = requires {
    { T::xso_name() } -> std::convertible_to<std::string>;
};
```
We use that concept to appropriately specialize the template [`std::formatter`] struct:
```cpp
template<has_xso_name_class_method T>
struct std::formatter<T> {
    ...
};
```
We can also define the usual output stream operator:
```cpp
template<has_xso_name_class_method T>
std::ostream &
operator<<(std::ostream &s, const T& rhs);
```

### See Also
[`xso_name`]            \
[`std::formatter`]